/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 /Users/kennethchoi/Documents/Dev/_/motion/threejs/misc/configurator/nike/nike01/public/assets/models/AF1_v2.glb 
*/

import React, { useEffect, useMemo, useRef } from 'react';
import { useGLTF, useTexture } from '@react-three/drei';
import gsap from 'gsap';

import groundShadow from '../assets/textures/ground_shadow-astc.webp';

// upper textures
import baseColor from '../assets/textures/leather_base_color-astc.webp';
import normal from '../assets/textures/leather_normal-astc.webp';
import orm from '../assets/textures/leather_orm-astc.webp';

// vamp leather textures
import vampLeatherBaseColor from '../assets/textures/vamp_leather_base_color-astc.webp';
import vampLeatherNormal from '../assets/textures/vamp_leather_normal-astc.webp';
import vampLeatherOrm from '../assets/textures/vamp_leather_orm-astc.webp';

// vamp canvas textures
import vampCanvasBaseColor from '../assets/textures/vamp_canvas_base_color-astc.webp';
import vampCanvasNormal from '../assets/textures/vamp_canvas_normal-astc.webp';
import vampCanvasOrm from '../assets/textures/vamp_canvas_orm-astc.webp';

// tip leather textures
import tipLeatherBaseColor from '../assets/textures/tip_leather_base_color-astc.webp';
import tipLeatherNormal from '../assets/textures/tip_leather_normal-astc.webp';
import tipLeatherOrm from '../assets/textures/tip_leather_orm-astc.webp';

// tip canvas textures
import tipCanvasBaseColor from '../assets/textures/tip_canvas_base_color-astc.webp';
import tipCanvasNormal from '../assets/textures/tip_canvas_normal-astc.webp';
import tipCanvasOrm from '../assets/textures/tip_canvas_orm-astc.webp';

// quarter leather textures
import quarterLeatherBaseColor from '../assets/textures/quarter_leather_base_color-astc.webp';
import quarterLeatherNormal from '../assets/textures/quarter_leather_normal-astc.webp';
import quarterLeatherOrm from '../assets/textures/quarter_leather_orm-astc.webp';

// quarter canvas textures
import quarterCanvasBaseColor from '../assets/textures/quarter_canvas_base_color-astc.webp';
import quarterCanvasNormal from '../assets/textures/quarter_canvas_normal-astc.webp';
import quarterCanvasOrm from '../assets/textures/quarter_canvas_orm-astc.webp';

// tongue leather textures
import tongueLeatherBaseColor from '../assets/textures/tongue_leather_base_color-astc.webp';
import tongueLeatherNormal from '../assets/textures/tongue_leather_normal-astc.webp';
import tongueLeatherOrm from '../assets/textures/tongue_leather_orm-astc.webp';

// tongue canvas textures
import tongueCanvasBaseColor from '../assets/textures/tongue_canvas_base_color-astc.webp';
import tongueCanvasNormal from '../assets/textures/tongue_canvas_normal-astc.webp';
import tongueCanvasOrm from '../assets/textures/tongue_canvas_orm-astc.webp';

// eyestay leather textures
import eyestayLeatherBaseColor from '../assets/textures/eyestay_leather_base_color-astc.webp';
import eyestayLeatherNormal from '../assets/textures/eyestay_leather_normal-astc.webp';
import eyestayLeatherOrm from '../assets/textures/eyestay_leather_orm-astc.webp';

// eyestay canvas textures
import eyestayCanvasBaseColor from '../assets/textures/eyestay_canvas_base_color-astc.webp';
import eyestayCanvasNormal from '../assets/textures/eyestay_canvas_normal-astc.webp';
import eyestayCanvasOrm from '../assets/textures/eyestay_canvas_orm-astc.webp';

// foxing leather textures
import foxingLeatherBaseColor from '../assets/textures/foxing_leather_base_color-astc.webp';
import foxingLeatherNormal from '../assets/textures/foxing_leather_normal-astc.webp';
import foxingLeatherOrm from '../assets/textures/foxing_leather_orm-astc.webp';

// foxing canvas textures
import foxingCanvasBaseColor from '../assets/textures/foxing_canvas_base_color-astc.webp';
import foxingCanvasNormal from '../assets/textures/foxing_canvas_normal-astc.webp';
import foxingCanvasOrm from '../assets/textures/foxing_canvas_orm-astc.webp';

// sqoosh leather textures
import swooshLeatherBaseColor from '../assets/textures/swoosh_leather_base_color-astc.webp';
import swooshLeatherNormal from '../assets/textures/swoosh_leather_normal-astc.webp';
import swooshLeatherOrm from '../assets/textures/swoosh_leather_orm-astc.webp';

// swoosh canvas textures
import swooshCanvasBaseColor from '../assets/textures/swoosh_canvas_base_color-astc.webp';
import swooshCanvasNormal from '../assets/textures/swoosh_canvas_normal-astc.webp';
import swooshCanvasOrm from '../assets/textures/swoosh_canvas_orm-astc.webp';

// midsole textures
import midsoleBaseColor from '../assets/textures/midsole_base_color-astc.webp';
import midsoleNormal from '../assets/textures/midsole_normal-astc.webp';
import midsoleOrm from '../assets/textures/midsole_orm-astc.webp';

// outsole textures
import outsoleBaseColor from '../assets/textures/outsole_base_color-astc.webp';
import outsoleNormal from '../assets/textures/outsole_normal-astc.webp';
import outsoleOrm from '../assets/textures/outsole_orm-astc.webp';

import {
  useCustomization,
  MATERIAL_TYPES,
  COLORS,
  LABEL_COLORS,
  SECTION_AREAS,
  SECTION_MAPPING,
} from '../context/Customization';

import * as THREE from 'three';
import { useFrame, useThree } from '@react-three/fiber';

export default function Model(props) {
  const groupRef = useRef(null);
  const {
    menuOpen,
    activeSection,
    setActiveSection,
    vampColor,
    vampMaterial,
    setVampColor,
    setVampMaterial,
    tipColor,
    tipMaterial,
    setTipColor,
    setTipMaterial,
    quarterColor,
    quarterMaterial,
    setQuarterColor,
    setQuarterMaterial,
    tongueColor,
    tongueMaterial,
    setTongueColor,
    setTongueMaterial,
    tongueLabelColor,
    setTongueLabelColor,
    eyestayColor,
    eyestayMaterial,
    setEyestayColor,
    setEyestayMaterial,
    foxingColor,
    foxingMaterial,
    setFoxingColor,
    setFoxingMaterial,
    swooshColor,
    swooshMaterial,
    setSwooshColor,
    setSwooshMaterial,
    laceColor,
    setLaceColor,
    backtabColor,
    setBacktabColor,
    midsoleColor,
    setMidsoleColor,
    outsoleColor,
    setOutsoleColor,
  } = useCustomization();

  // useEffect(() => {
  //   console.log('menuOpen', menuOpen);
  //   groupRef.current.position.y = menuOpen ? 0.5 : 0;
  // }, [menuOpen]);

  const { nodes, materials, scene } = useGLTF('/assets/models/AF1_v3.glb');
  const groundShadowTexture = useTexture(groundShadow);
  // upper texture
  const baseColorTexture = useTexture(baseColor);
  const normalTexture = useTexture(normal);
  const ormTexture = useTexture(orm);
  baseColorTexture.flipY = false;
  normalTexture.flipY = false;
  ormTexture.flipY = false;

  // vamp leather texture
  const vampLeatherBaseColorTexture = useTexture(vampLeatherBaseColor);
  const vampLeatherNormalTexture = useTexture(vampLeatherNormal);
  const vampLeatherOrmTexture = useTexture(vampLeatherOrm);
  vampLeatherBaseColorTexture.flipY = false;
  vampLeatherNormalTexture.flipY = false;
  vampLeatherOrmTexture.flipY = false;
  // vamp canvas texture
  const vampCanvasBaseColorTexture = useTexture(vampCanvasBaseColor);
  const vampCanvasNormalTexture = useTexture(vampCanvasNormal);
  const vampCanvasOrmTexture = useTexture(vampCanvasOrm);
  vampCanvasBaseColorTexture.flipY = false;
  vampCanvasNormalTexture.flipY = false;
  vampCanvasOrmTexture.flipY = false;

  // tip leather texture
  const tipLeatherBaseColorTexture = useTexture(tipLeatherBaseColor);
  const tipLeatherNormalTexture = useTexture(tipLeatherNormal);
  const tipLeatherOrmTexture = useTexture(tipLeatherOrm);
  tipLeatherBaseColorTexture.flipY = false;
  tipLeatherNormalTexture.flipY = false;
  tipLeatherOrmTexture.flipY = false;
  // tip canvas texture
  const tipCanvasBaseColorTexture = useTexture(tipCanvasBaseColor);
  const tipCanvasNormalTexture = useTexture(tipCanvasNormal);
  const tipCanvasOrmTexture = useTexture(tipCanvasOrm);
  tipCanvasBaseColorTexture.flipY = false;
  tipCanvasNormalTexture.flipY = false;
  tipCanvasOrmTexture.flipY = false;

  // quarter leather texture
  const quarterLeatherBaseColorTexture = useTexture(quarterLeatherBaseColor);
  const quarterLeatherNormalTexture = useTexture(quarterLeatherNormal);
  const quarterLeatherOrmTexture = useTexture(quarterLeatherOrm);
  quarterLeatherBaseColorTexture.flipY = false;
  quarterLeatherNormalTexture.flipY = false;
  quarterLeatherOrmTexture.flipY = false;
  // quarter canvas texture
  const quarterCanvasBaseColorTexture = useTexture(quarterCanvasBaseColor);
  const quarterCanvasNormalTexture = useTexture(quarterCanvasNormal);
  const quarterCanvasOrmTexture = useTexture(quarterCanvasOrm);
  quarterCanvasBaseColorTexture.flipY = false;
  quarterCanvasNormalTexture.flipY = false;
  quarterCanvasOrmTexture.flipY = false;

  // tongue leather texture
  const tongueLeatherBaseColorTexture = useTexture(tongueLeatherBaseColor);
  const tongueLeatherNormalTexture = useTexture(tongueLeatherNormal);
  const tongueLeatherOrmTexture = useTexture(tongueLeatherOrm);
  tongueLeatherBaseColorTexture.flipY = false;
  tongueLeatherNormalTexture.flipY = false;
  tongueLeatherOrmTexture.flipY = false;
  // tongue canvas texture
  const tongueCanvasBaseColorTexture = useTexture(tongueCanvasBaseColor);
  const tongueCanvasNormalTexture = useTexture(tongueCanvasNormal);
  const tongueCanvasOrmTexture = useTexture(tongueCanvasOrm);
  tongueCanvasBaseColorTexture.flipY = false;
  tongueCanvasNormalTexture.flipY = false;
  tongueCanvasOrmTexture.flipY = false;

  // eyestay leather texture
  const eyestayLeatherBaseColorTexture = useTexture(eyestayLeatherBaseColor);
  const eyestayLeatherNormalTexture = useTexture(eyestayLeatherNormal);
  const eyestayLeatherOrmTexture = useTexture(eyestayLeatherOrm);
  eyestayLeatherBaseColorTexture.flipY = false;
  eyestayLeatherNormalTexture.flipY = false;
  eyestayLeatherOrmTexture.flipY = false;
  // eyestay canvas texture
  const eyestayCanvasBaseColorTexture = useTexture(eyestayCanvasBaseColor);
  const eyestayCanvasNormalTexture = useTexture(eyestayCanvasNormal);
  const eyestayCanvasOrmTexture = useTexture(eyestayCanvasOrm);
  eyestayCanvasBaseColorTexture.flipY = false;
  eyestayCanvasNormalTexture.flipY = false;
  eyestayCanvasOrmTexture.flipY = false;

  // foxing leather texture
  const foxingLeatherBaseColorTexture = useTexture(foxingLeatherBaseColor);
  const foxingLeatherNormalTexture = useTexture(foxingLeatherNormal);
  const foxingLeatherOrmTexture = useTexture(foxingLeatherOrm);
  foxingLeatherBaseColorTexture.flipY = false;
  foxingLeatherNormalTexture.flipY = false;
  foxingLeatherOrmTexture.flipY = false;
  // foxing canvas texture
  const foxingCanvasBaseColorTexture = useTexture(foxingCanvasBaseColor);
  const foxingCanvasNormalTexture = useTexture(foxingCanvasNormal);
  const foxingCanvasOrmTexture = useTexture(foxingCanvasOrm);
  foxingCanvasBaseColorTexture.flipY = false;
  foxingCanvasNormalTexture.flipY = false;
  foxingCanvasOrmTexture.flipY = false;

  // swoosh leather texture
  const swooshLeatherBaseColorTexture = useTexture(swooshLeatherBaseColor);
  const swooshLeatherNormalTexture = useTexture(swooshLeatherNormal);
  const swooshLeatherOrmTexture = useTexture(swooshLeatherOrm);
  swooshLeatherBaseColorTexture.flipY = false;
  swooshLeatherNormalTexture.flipY = false;
  swooshLeatherOrmTexture.flipY = false;
  // swoosh canvas texture
  const swooshCanvasBaseColorTexture = useTexture(swooshCanvasBaseColor);
  const swooshCanvasNormalTexture = useTexture(swooshCanvasNormal);
  const swooshCanvasOrmTexture = useTexture(swooshCanvasOrm);
  swooshCanvasBaseColorTexture.flipY = false;
  swooshCanvasNormalTexture.flipY = false;
  swooshCanvasOrmTexture.flipY = false;

  // midsole texture
  const midsoleBaseColorTexture = useTexture(midsoleBaseColor);
  const midsoleNormalTexture = useTexture(midsoleNormal);
  const midsoleOrmTexture = useTexture(midsoleOrm);
  midsoleBaseColorTexture.flipY = false;
  midsoleNormalTexture.flipY = false;
  midsoleOrmTexture.flipY = false;
  // outsole texture
  const outsoleBaseColorTexture = useTexture(outsoleBaseColor);
  const outsoleNormalTexture = useTexture(outsoleNormal);
  const outsoleOrmTexture = useTexture(outsoleOrm);
  outsoleBaseColorTexture.flipY = false;
  outsoleNormalTexture.flipY = false;
  outsoleOrmTexture.flipY = false;

  const material = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: baseColorTexture,
        normalMap: normalTexture,
        aoMap: ormTexture,
        aoMapIntensity: 1,
        metalnessMap: ormTexture,
        metalness: 0.25,
        roughnessMap: ormTexture,
        roughness: 4,
        color: 'rgba(255,255,255,255)',
      }),
    [baseColorTexture, normalTexture, ormTexture]
  );
  const materialInteriorLining = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: baseColorTexture,
        normalMap: normalTexture,
        aoMap: ormTexture,
        aoMapIntensity: 1,
        metalnessMap: ormTexture,
        metalness: 0.25,
        roughnessMap: ormTexture,
        roughness: 4,
        color: 'rgba(255,255,255,255)',
      }),
    [baseColorTexture, normalTexture, ormTexture]
  );
  const materialTongueLabel = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: baseColorTexture,
        normalMap: normalTexture,
        aoMap: ormTexture,
        aoMapIntensity: 1,
        metalnessMap: ormTexture,
        metalness: 0.25,
        roughnessMap: ormTexture,
        roughness: 4,
        color: tongueLabelColor.hex1,
      }),
    [baseColorTexture, normalTexture, ormTexture, tongueLabelColor.hex1]
  );
  const materialTongueLabelText = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: baseColorTexture,
        normalMap: normalTexture,
        aoMap: ormTexture,
        aoMapIntensity: 1,
        metalnessMap: ormTexture,
        metalness: 0.25,
        roughnessMap: ormTexture,
        roughness: 4,
        color: tongueLabelColor.hex2,
        transparent: true,
      }),
    [baseColorTexture, normalTexture, ormTexture, tongueLabelColor.hex2]
  );
  const materialBacktab = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: baseColorTexture,
        normalMap: normalTexture,
        aoMap: ormTexture,
        aoMapIntensity: 1,
        metalnessMap: ormTexture,
        metalness: 0.25,
        roughnessMap: ormTexture,
        roughness: 4,
        transparent: true,
        color: backtabColor.hex,
      }),
    [backtabColor.hex, baseColorTexture, normalTexture, ormTexture]
  );
  const materialTransparent = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: baseColorTexture,
        normalMap: normalTexture,
        aoMap: ormTexture,
        aoMapIntensity: 1,
        metalnessMap: ormTexture,
        metalness: 0.25,
        roughnessMap: ormTexture,
        roughness: 4,
        transparent: true,
      }),
    []
  );
  const materialVamp = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map:
          vampMaterial === MATERIAL_TYPES.leather
            ? vampLeatherBaseColorTexture
            : vampCanvasBaseColorTexture,
        normalMap:
          vampMaterial === MATERIAL_TYPES.leather
            ? vampLeatherNormalTexture
            : vampCanvasNormalTexture,
        aoMap:
          vampMaterial === MATERIAL_TYPES.leather
            ? vampLeatherOrmTexture
            : vampCanvasOrmTexture,
        aoMapIntensity: 1,
        metalnessMap:
          vampMaterial === MATERIAL_TYPES.leather
            ? vampLeatherOrmTexture
            : vampCanvasOrmTexture,
        metalness: 0.25,
        roughnessMap:
          vampMaterial === MATERIAL_TYPES.leather
            ? vampLeatherOrmTexture
            : vampCanvasOrmTexture,
        roughness: 4,
        color: vampColor.hex,
      }),
    [
      vampCanvasBaseColorTexture,
      vampCanvasNormalTexture,
      vampCanvasOrmTexture,
      vampColor,
      vampLeatherBaseColorTexture,
      vampLeatherNormalTexture,
      vampLeatherOrmTexture,
      vampMaterial,
    ]
  );
  const materialTip = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map:
          tipMaterial === MATERIAL_TYPES.leather
            ? tipLeatherBaseColorTexture
            : tipCanvasBaseColorTexture,
        normalMap:
          tipMaterial === MATERIAL_TYPES.leather
            ? tipLeatherNormalTexture
            : tipCanvasNormalTexture,
        aoMap:
          tipMaterial === MATERIAL_TYPES.leather
            ? tipLeatherOrmTexture
            : tipCanvasOrmTexture,
        aoMapIntensity: 1,
        metalnessMap:
          tipMaterial === MATERIAL_TYPES.leather
            ? tipLeatherOrmTexture
            : tipCanvasOrmTexture,
        metalness: 0.25,
        roughnessMap:
          tipMaterial === MATERIAL_TYPES.leather
            ? tipLeatherOrmTexture
            : tipCanvasOrmTexture,
        roughness: 4,
        color: tipColor.hex,
      }),
    [
      tipCanvasBaseColorTexture,
      tipCanvasNormalTexture,
      tipCanvasOrmTexture,
      tipColor,
      tipLeatherBaseColorTexture,
      tipLeatherNormalTexture,
      tipLeatherOrmTexture,
      tipMaterial,
    ]
  );
  const materialTipStitching = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: baseColorTexture,
        normalMap: normalTexture,
        aoMap: ormTexture,
        aoMapIntensity: 1,
        metalnessMap: ormTexture,
        metalness: 0.25,
        roughnessMap: ormTexture,
        roughness: 4,
        color: tipColor.hex,
      }),
    [baseColorTexture, normalTexture, ormTexture, tipColor.hex]
  );
  const materialQuarter = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map:
          quarterMaterial === MATERIAL_TYPES.leather
            ? quarterLeatherBaseColorTexture
            : quarterCanvasBaseColorTexture,
        normalMap:
          quarterMaterial === MATERIAL_TYPES.leather
            ? quarterLeatherNormalTexture
            : quarterCanvasNormalTexture,
        aoMap:
          quarterMaterial === MATERIAL_TYPES.leather
            ? quarterLeatherOrmTexture
            : quarterCanvasOrmTexture,
        aoMapIntensity: 1,
        metalnessMap:
          quarterMaterial === MATERIAL_TYPES.leather
            ? quarterLeatherOrmTexture
            : quarterCanvasOrmTexture,
        metalness: 0.25,
        roughnessMap:
          quarterMaterial === MATERIAL_TYPES.leather
            ? quarterLeatherOrmTexture
            : quarterCanvasOrmTexture,
        roughness: 4,
        color: quarterColor.hex,
      }),
    [
      quarterCanvasBaseColorTexture,
      quarterCanvasNormalTexture,
      quarterCanvasOrmTexture,
      quarterColor,
      quarterLeatherBaseColorTexture,
      quarterLeatherNormalTexture,
      quarterLeatherOrmTexture,
      quarterMaterial,
    ]
  );
  const materialTongue = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map:
          tongueMaterial === MATERIAL_TYPES.leather
            ? tongueLeatherBaseColorTexture
            : tongueCanvasBaseColorTexture,
        normalMap:
          tongueMaterial === MATERIAL_TYPES.leather
            ? tongueLeatherNormalTexture
            : tongueCanvasNormalTexture,
        aoMap:
          tongueMaterial === MATERIAL_TYPES.leather
            ? tongueLeatherOrmTexture
            : tongueCanvasOrmTexture,
        aoMapIntensity: 1,
        metalnessMap:
          tongueMaterial === MATERIAL_TYPES.leather
            ? tongueLeatherOrmTexture
            : tongueCanvasOrmTexture,
        metalness: 0.25,
        roughnessMap:
          tongueMaterial === MATERIAL_TYPES.leather
            ? tongueLeatherOrmTexture
            : tongueCanvasOrmTexture,
        roughness: 4,
        color: tongueColor.hex,
      }),
    [
      tongueCanvasBaseColorTexture,
      tongueCanvasNormalTexture,
      tongueCanvasOrmTexture,
      tongueColor,
      tongueLeatherBaseColorTexture,
      tongueLeatherNormalTexture,
      tongueLeatherOrmTexture,
      tongueMaterial,
    ]
  );
  const materialTongueStitching = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: baseColorTexture,
        normalMap: normalTexture,
        aoMap: ormTexture,
        aoMapIntensity: 1,
        metalnessMap: ormTexture,
        metalness: 0.25,
        roughnessMap: ormTexture,
        roughness: 4,
        color: tongueColor.hex,
      }),
    [baseColorTexture, normalTexture, ormTexture, tongueColor.hex]
  );
  const materialEyestay = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map:
          eyestayMaterial === MATERIAL_TYPES.leather
            ? eyestayLeatherBaseColorTexture
            : eyestayCanvasBaseColorTexture,
        normalMap:
          eyestayMaterial === MATERIAL_TYPES.leather
            ? eyestayLeatherNormalTexture
            : eyestayCanvasNormalTexture,
        aoMap:
          eyestayMaterial === MATERIAL_TYPES.leather
            ? eyestayLeatherOrmTexture
            : eyestayCanvasOrmTexture,
        aoMapIntensity: 1,
        metalnessMap:
          eyestayMaterial === MATERIAL_TYPES.leather
            ? eyestayLeatherOrmTexture
            : eyestayCanvasOrmTexture,
        metalness: 0.25,
        roughnessMap:
          eyestayMaterial === MATERIAL_TYPES.leather
            ? eyestayLeatherOrmTexture
            : eyestayCanvasOrmTexture,
        roughness: 4,
        color: eyestayColor.hex,
      }),
    [
      eyestayCanvasBaseColorTexture,
      eyestayCanvasNormalTexture,
      eyestayCanvasOrmTexture,
      eyestayColor,
      eyestayLeatherBaseColorTexture,
      eyestayLeatherNormalTexture,
      eyestayLeatherOrmTexture,
      eyestayMaterial,
    ]
  );
  const materialEyestayStitching = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: baseColorTexture,
        normalMap: normalTexture,
        aoMap: ormTexture,
        aoMapIntensity: 1,
        metalnessMap: ormTexture,
        metalness: 0.25,
        roughnessMap: ormTexture,
        roughness: 4,
        color: eyestayColor.hex,
        // color: 'red',
      }),
    [baseColorTexture, normalTexture, ormTexture, eyestayColor.hex]
  );
  const materialFoxing = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map:
          foxingMaterial === MATERIAL_TYPES.leather
            ? foxingLeatherBaseColorTexture
            : foxingCanvasBaseColorTexture,
        normalMap:
          foxingMaterial === MATERIAL_TYPES.leather
            ? foxingLeatherNormalTexture
            : foxingCanvasNormalTexture,
        aoMap:
          foxingMaterial === MATERIAL_TYPES.leather
            ? foxingLeatherOrmTexture
            : foxingCanvasOrmTexture,
        aoMapIntensity: 1,
        metalnessMap:
          foxingMaterial === MATERIAL_TYPES.leather
            ? foxingLeatherOrmTexture
            : foxingCanvasOrmTexture,
        metalness: 0.25,
        roughnessMap:
          foxingMaterial === MATERIAL_TYPES.leather
            ? foxingLeatherOrmTexture
            : foxingCanvasOrmTexture,
        roughness: 4,
        color: foxingColor.hex,
      }),
    [
      foxingCanvasBaseColorTexture,
      foxingCanvasNormalTexture,
      foxingCanvasOrmTexture,
      foxingColor,
      foxingLeatherBaseColorTexture,
      foxingLeatherNormalTexture,
      foxingLeatherOrmTexture,
      foxingMaterial,
    ]
  );

  const materialFoxingStitching = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: baseColorTexture,
        normalMap: normalTexture,
        aoMap: ormTexture,
        aoMapIntensity: 1,
        metalnessMap: ormTexture,
        metalness: 0.25,
        roughnessMap: ormTexture,
        roughness: 4,
        color: foxingColor.hex,
      }),
    [baseColorTexture, foxingColor.hex, normalTexture, ormTexture]
  );

  const materialSwoosh = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map:
          swooshMaterial === MATERIAL_TYPES.leather
            ? swooshLeatherBaseColorTexture
            : swooshCanvasBaseColorTexture,
        normalMap:
          swooshMaterial === MATERIAL_TYPES.leather
            ? swooshLeatherNormalTexture
            : swooshCanvasNormalTexture,

        aoMap:
          swooshMaterial === MATERIAL_TYPES.leather
            ? swooshLeatherOrmTexture
            : swooshCanvasOrmTexture,
        aoMapIntensity: 1,
        metalnessMap:
          swooshMaterial === MATERIAL_TYPES.leather
            ? swooshLeatherOrmTexture
            : swooshCanvasOrmTexture,
        metalness: 0.25,
        roughnessMap:
          swooshMaterial === MATERIAL_TYPES.leather
            ? swooshLeatherOrmTexture
            : swooshCanvasOrmTexture,
        roughness: 4,
        color: swooshColor.hex,
      }),
    [
      swooshCanvasBaseColorTexture,
      swooshCanvasNormalTexture,
      swooshCanvasOrmTexture,
      swooshColor,
      swooshLeatherBaseColorTexture,
      swooshLeatherNormalTexture,
      swooshLeatherOrmTexture,
      swooshMaterial,
    ]
  );
  const materialSwooshStitching = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: baseColorTexture,
        normalMap: normalTexture,
        aoMap: ormTexture,
        aoMapIntensity: 1,
        metalnessMap: ormTexture,
        metalness: 0.25,
        roughnessMap: ormTexture,
        roughness: 4,
        color: swooshColor.hex,
      }),
    [baseColorTexture, normalTexture, ormTexture, swooshColor.hex]
  );

  const materialLace = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: baseColorTexture,
        normalMap: normalTexture,
        aoMap: ormTexture,
        aoMapIntensity: 1,
        metalnessMap: ormTexture,
        metalness: 0.25,
        roughnessMap: ormTexture,
        roughness: 4,
        color: laceColor.hex,
      }),
    [baseColorTexture, laceColor.hex, normalTexture, ormTexture]
  );

  const materialMidsole = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: midsoleBaseColorTexture,
        normalMap: midsoleNormalTexture,
        aoMap: midsoleOrmTexture,
        aoMapIntensity: 0,
        metalnessMap: midsoleOrmTexture,
        metalness: 0,
        roughnessMap: midsoleOrmTexture,
        roughness: 10,
        color: midsoleColor.hex,
      }),
    [
      midsoleBaseColorTexture,
      midsoleColor,
      midsoleNormalTexture,
      midsoleOrmTexture,
    ]
  );
  const materialMidsoleAccent = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        color: midsoleColor.hex,
      }),
    [midsoleColor.hex]
  );
  const materialOutsole = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: outsoleBaseColorTexture,
        normalMap: outsoleNormalTexture,
        aoMap: outsoleOrmTexture,
        aoMapIntensity: 0,
        metalnessMap: outsoleOrmTexture,
        metalness: 0,
        roughnessMap: outsoleOrmTexture,
        roughness: 1,
        color: outsoleColor.hex,
      }),
    [
      outsoleBaseColorTexture,
      outsoleColor,
      outsoleNormalTexture,
      outsoleOrmTexture,
    ]
  );

  const SECTION_MATERIAL_MAPPING = useMemo(
    () => ({
      0: [materialVamp],
      1: [materialTip, materialTipStitching],
      2: [materialQuarter],
      3: [materialTongue, materialTongueStitching],
      4: [materialTongueLabel, materialTongueLabelText],
      5: [materialEyestay, materialEyestayStitching],
      6: [materialFoxing, materialFoxingStitching],
      7: [materialSwoosh, materialSwooshStitching],
      8: [materialLace],
      9: [materialMidsole, materialMidsoleAccent],
      10: [materialOutsole],
      11: [materialBacktab],
    }),
    [
      materialBacktab,
      materialEyestay,
      materialEyestayStitching,
      materialFoxing,
      materialFoxingStitching,
      materialLace,
      materialMidsole,
      materialMidsoleAccent,
      materialOutsole,
      materialQuarter,
      materialSwoosh,
      materialSwooshStitching,
      materialTip,
      materialTipStitching,
      materialTongue,
      materialTongueLabel,
      materialTongueLabelText,
      materialTongueStitching,
      materialVamp,
    ]
  );

  const pointer = useRef({ x: 0, y: 0 });
  const handlePointerDown = (e) => {
    pointer.current.x = e.clientX;
    pointer.current.y = e.clientY;
  };

  const handleChangeActiveSection = (e, section) => {
    // if pointer moved, don't change active section
    if (
      Math.abs(e.clientX - pointer.current.x) > 5 ||
      Math.abs(e.clientY - pointer.current.y) > 5
    )
      return;
    e.stopPropagation();
    setActiveSection(SECTION_MAPPING[section]);
  };

  useEffect(() => {
    const materials = SECTION_MATERIAL_MAPPING[activeSection];
    if (materials) {
      materials.forEach((material, index) => {
        const originalColor = material.color;
        const tl = gsap.timeline();
        tl.to(material.color, {
          duration: 0.5,
          r: 0.45,
          g: 0.75,
          b: 0.72,
        });
        tl.to(material.color, {
          duration: 0.75,
          r: originalColor.r,
          g: originalColor.g,
          b: originalColor.b,
        });
      });
    }
  }, [activeSection]);

  return (
    <group {...props} dispose={null} ref={groupRef}>
      <group rotation={[Math.PI / 2, 0, Math.PI * 0.5]}>
        <mesh geometry={nodes.shadow_plane.geometry}>
          <meshStandardMaterial
            map={groundShadowTexture}
            color={0xffffff}
            transparent
            opacity={1}
          />
        </mesh>
        <group position={[-0.75, -0.75, -0.55]} rotation={[0, -0.262, 0]}>
          <mesh
            geometry={nodes.lf_backstay.geometry}
            material={materialFoxing}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) => {
              handleChangeActiveSection(e, SECTION_AREAS.foxingLining);
            }}
          />
          <mesh
            geometry={nodes.lf_backtab.geometry}
            material={materialSwoosh}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.swooshBacktab)
            }
          />
          <mesh
            geometry={nodes.lf_backtab_logo.geometry}
            material={materialBacktab}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.backtabLogo)
            }
          />
          <mesh
            geometry={nodes.lf_backtab_logo_air.geometry}
            material={materialBacktab}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.backtabLogo)
            }
          />
          <mesh
            geometry={nodes.lf_dubrae.geometry}
            material={materialLace}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.laceDubrae)
            }
          />
          <mesh
            geometry={nodes.lf_eyestay.geometry}
            material={materialEyestay}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.eyestay)
            }
          />
          <mesh
            geometry={nodes.lf_eyestay_emb.geometry}
            material={materialEyestayStitching}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.eyestay)
            }
          />
          <mesh
            geometry={nodes.lf_foxing.geometry}
            material={materialFoxing}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.foxingLining)
            }
          />
          <mesh
            geometry={nodes.lf_interior_lining.geometry}
            material={materialInteriorLining}
          />
          <mesh
            geometry={nodes.lf_lace.geometry}
            material={materialLace}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.laceDubrae)
            }
          />
          <mesh
            geometry={nodes.lf_lining.geometry}
            material={materialFoxingStitching}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.foxingLining)
            }
          />
          <mesh
            geometry={nodes.lf_quarter.geometry}
            material={materialQuarter}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.quarter)
            }
          />
          <mesh
            geometry={nodes.lf_sockliner_topcloth.geometry}
            material={material}
          />
          <mesh
            geometry={nodes.lf_sockliner_topcloth_logo.geometry}
            material={materialTransparent}
          />
          <mesh
            geometry={nodes.lf_swoosh.geometry}
            material={materialSwoosh}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.swooshBacktab)
            }
          />
          <mesh
            geometry={nodes.lf_tip.geometry}
            material={materialTip}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) => handleChangeActiveSection(e, SECTION_AREAS.tip)}
          />
          <mesh
            geometry={nodes.lf_tongue.geometry}
            material={materialTongue}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.tongue)
            }
          />
          <mesh
            geometry={nodes.lf_tongue_binding.geometry}
            material={materialTongueStitching}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.tongue)
            }
          />
          <mesh
            geometry={nodes.lf_tongue_label.geometry}
            material={materialTongueLabel}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.tongueLabel)
            }
          />
          <mesh
            geometry={nodes.lf_tongue_label_logo.geometry}
            material={materialTongueLabelText}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.tongueLabel)
            }
          />
          <mesh
            geometry={nodes.lf_tongue_lining.geometry}
            material={materialTongueStitching}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.tongue)
            }
          />
          <mesh
            geometry={nodes.lf_vamp.geometry}
            material={materialVamp}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.vamp)
            }
          />
          <mesh
            geometry={nodes.lf_backstay_stitch.geometry}
            material={materialFoxingStitching}
          />
          <mesh
            geometry={nodes.lf_backtab_stitch.geometry}
            material={materialSwooshStitching}
          />
          <mesh
            geometry={nodes.lf_eyestay_stitch.geometry}
            material={materialEyestayStitching}
          />
          <mesh
            geometry={nodes.lf_foxing_stitch.geometry}
            material={materialFoxingStitching}
          />
          <mesh
            geometry={nodes.lf_swoosh_stitch.geometry}
            material={materialSwooshStitching}
          />
          <mesh
            geometry={nodes.lf_tip_stitch.geometry}
            material={materialTipStitching}
          />
          <mesh
            geometry={nodes.lf_tongue_binding_stitch.geometry}
            material={materialTongueStitching}
          />
          <mesh
            geometry={nodes.lf_tongue_lining_stitch.geometry}
            material={materialTongue}
          />
          <mesh
            geometry={nodes.lf_tongue_stitch.geometry}
            material={materialTongueStitching}
          />
          <mesh
            geometry={nodes.lf_airbag.geometry}
            material={materialMidsole}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.midsole)
            }
          />
          <mesh
            geometry={nodes.lf_midsole.geometry}
            material={materialMidsole}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.midsole)
            }
          />
          <mesh
            geometry={nodes.lf_midsole_accent.geometry}
            material={materialMidsoleAccent}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.midsole)
            }
          />
          <mesh
            geometry={nodes.lf_midsole_stitch.geometry}
            material={materialMidsole}
          />
          <mesh
            geometry={nodes.lf_outsole.geometry}
            material={materialOutsole}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.outsole)
            }
          />
          <mesh
            geometry={nodes.lf_outsole_nike.geometry}
            material={materialOutsole}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.outsole)
            }
          />
        </group>
        <group position={[-0.75, 0.75, -0.55]} rotation={[0, -0.262, 0]}>
          <mesh
            geometry={nodes.rt_backstay.geometry}
            material={materialFoxing}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.foxingLining)
            }
          />
          <mesh
            geometry={nodes.rt_backtab.geometry}
            material={materialSwoosh}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.swooshBacktab)
            }
          />
          <mesh
            geometry={nodes.rt_backtab_logo.geometry}
            material={materialBacktab}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.backtabLogo)
            }
          />
          <mesh
            geometry={nodes.rt_backtab_logo_air.geometry}
            material={materialBacktab}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.backtabLogo)
            }
          />
          <mesh
            geometry={nodes.rt_dubrae.geometry}
            material={materialLace}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.laceDubrae)
            }
          />
          <mesh
            geometry={nodes.rt_eyestay.geometry}
            material={materialEyestay}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.eyestay)
            }
          />
          <mesh
            geometry={nodes.rt_eyestay_emb.geometry}
            material={materialEyestayStitching}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.eyestay)
            }
          />
          <mesh
            geometry={nodes.rt_foxing.geometry}
            material={materialFoxing}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.foxingLining)
            }
          />
          <mesh
            geometry={nodes.rt_interior_lining.geometry}
            material={materialInteriorLining}
          />
          <mesh
            geometry={nodes.rt_lace.geometry}
            material={materialLace}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.laceDubrae)
            }
          />
          <mesh
            geometry={nodes.rt_lining.geometry}
            material={materialFoxingStitching}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.foxingLining)
            }
          />
          <mesh
            geometry={nodes.rt_quarter.geometry}
            material={materialQuarter}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.quarter)
            }
          />
          <mesh
            geometry={nodes.rt_sockliner_topcloth.geometry}
            material={material}
          />
          <mesh
            geometry={nodes.rt_sockliner_topcloth_logo.geometry}
            material={materialTransparent}
          />
          <mesh
            geometry={nodes.rt_swoosh.geometry}
            material={materialSwoosh}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.swooshBacktab)
            }
          />
          <mesh
            geometry={nodes.rt_tip.geometry}
            material={materialTip}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) => handleChangeActiveSection(e, SECTION_AREAS.tip)}
          />
          <mesh
            geometry={nodes.rt_tongue.geometry}
            material={materialTongue}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.tongue)
            }
          />
          <mesh
            geometry={nodes.rt_tongue_binding.geometry}
            material={materialTongueStitching}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.tongue)
            }
          />
          <mesh
            geometry={nodes.rt_tongue_label.geometry}
            material={materialTongueLabel}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.tongueLabel)
            }
          />
          <mesh
            geometry={nodes.rt_tongue_label_logo.geometry}
            material={materialTongueLabelText}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.tongueLabel)
            }
          />
          <mesh
            geometry={nodes.rt_tongue_lining.geometry}
            material={materialTongueStitching}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.tongue)
            }
          />
          <mesh
            geometry={nodes.rt_vamp.geometry}
            material={materialVamp}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.vamp)
            }
          />
          <mesh
            geometry={nodes.rt_backstay_stitch.geometry}
            material={materialFoxingStitching}
          />
          <mesh
            geometry={nodes.rt_backtab_stitch.geometry}
            material={materialSwooshStitching}
          />
          <mesh
            geometry={nodes.rt_eyestay_stitch.geometry}
            material={materialEyestayStitching}
          />
          <mesh
            geometry={nodes.rt_foxing_stitch.geometry}
            material={materialFoxingStitching}
          />
          <mesh
            geometry={nodes.rt_swoosh_stitch.geometry}
            material={materialSwooshStitching}
          />
          <mesh
            geometry={nodes.rt_tip_stitch.geometry}
            material={materialTipStitching}
          />
          <mesh
            geometry={nodes.rt_tongue_binding_stitch.geometry}
            material={materialTongueStitching}
          />
          <mesh
            geometry={nodes.rt_tongue_lining_stitch.geometry}
            material={materialTongue}
          />
          <mesh
            geometry={nodes.rt_tongue_stitch.geometry}
            material={materialTongueStitching}
          />
          <mesh
            geometry={nodes.rt_airbag.geometry}
            material={materialMidsole}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.midsole)
            }
          />
          <mesh
            geometry={nodes.rt_midsole.geometry}
            material={materialMidsole}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.midsole)
            }
          />
          <mesh
            geometry={nodes.rt_midsole_accent.geometry}
            material={materialMidsoleAccent}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.midsole)
            }
          />
          <mesh
            geometry={nodes.rt_midsole_stitch.geometry}
            material={materialMidsole}
          />
          <mesh
            geometry={nodes.rt_outsole.geometry}
            material={materialOutsole}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.outsole)
            }
          />
          <mesh
            geometry={nodes.rt_outsole_nike.geometry}
            material={materialOutsole}
            onPointerDown={handlePointerDown}
            onPointerUp={(e) =>
              handleChangeActiveSection(e, SECTION_AREAS.outsole)
            }
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/assets/models/AF1_v3.glb');
